// Internal Vars (Internal variables have one function, and that's to be assigned to other variables.)
$x-palette-white: #ffffff; // White

// PALETTE COLOURS
// All of our palette colours with their respective tints (mix white in at 10% intervals)
$palettes: (
  // MAIN COLORS
    primary: #f58025 /* WM Furnace Orange*/,
  secondary: #54565b /* WM Gunmetal Grey*/,
  black: #231f20 /* WM Carbon Black*/,
  // SECONDARY COLORS
    green: #00a19c /* WM Green*/,
  red: #d60037 /* WM Red*/,
  purple: #94368d /* WM Purple*/,
  blue: #008fbf /* WM Blue*/
);

// This is to get one of the brand colors above
// Use it like so... getColor(primary);
// If you'd like to get a tint of a color, use it like so...
// getColor(primary, 50);
@function getColor($color, $percent: null) {
  @if ($percent != null) {
    @return map-get(map-get($colors-map, $color), $percent);
  } @else {
    @return map-get(map-get($colors-map, $color), 100);
  }
}

// In SCSS a map == array
$colors-map: (); // Set placeholder colors map

// Function for defining our tints later on
@function create_colour_map($color) {
  $map: (
    100: $color,
    90: mix($color, white, 90),
    80: mix($color, white, 80),
    70: mix($color, white, 70),
    60: mix($color, white, 60),
    50: mix($color, white, 50),
    40: mix($color, white, 40),
    30: mix($color, white, 30),
    20: mix($color, white, 20),
    10: mix($color, white, 10)
  );
  @return $map;
}

// Foreach key: color(val) in the $palettes list/array
@each $key, $value in $palettes {
  $map: (); // Set placeholder map
  // Using the function above, generate all our tints as new key:vals in a new map
  $map: map-merge(
    $map,
    (
      $key: create_colour_map($value)
    )
  );
  $colors-map: map-merge($colors-map, $map); // Then merge all our tints in to a map
}

// Foreach key: color(val) in the $colors-map list/array
@each $key, $color in $colors-map {
  // Then foreach key: color in that key(list of tints)
  @each $k, $c in map-get($colors-map, $key) {
    @if ($k == 100) {
      // Create default color class (E.g. color-primary)
      .color-#{$key} {
        color: $c;
      }
      // Create default bg-color class (E.g. bg-color-secondary)
      .bg-color-#{$key} {
        background-color: $c;
      }
    } @else {
      // Generate a color class (E.g. .color-primary-60)
      .color-#{$key}-#{$k} {
        color: $c;
      }
      // Generate a bg color class (E.g. .bg-color-secondary-40)
      .bg-color-#{$key}-#{$k} {
        background-color: $c;
      }
    }
  }
}

// Text Vars
$text-color: getColor(secondary);
$x-font-family: 'Noto Sans', sans-serif;
$x-heading-font-family: 'DM Sans', sans-serif;
$font-size: 16px;
